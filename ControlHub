local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()


local MainWindow = Rayfield:CreateWindow({
    Name = "ControlHub",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by ctrrlq",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "McDonalds Hub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD.
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "ControlHub",
       Subtitle = "Key System",
       Note = "lctrrlq winning",
       FileName = "SiriusKey",
       SaveKey = true,
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = "McDonalds"
    }
 })


 local MainTab = MainWindow:CreateTab("Player", 4483362458) -- Title, Image

 

 local Toggle = MainTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(InfiniteJumpEnabled)
        local InfiniteJumpEnabled = true
        game:GetService("UserInputService").JumpRequest:connect(function()
            if InfiniteJumpEnabled then
                game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
            end
        end)
    end,
 })



 local Slider = MainTab:CreateSlider({
    Name = "Walkspeed",
    Range = {16, 250},
    Increment = 10,
    Suffix = "Walkspeed",
    CurrentValue = 10,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v
    end,
 })



 local Slider = MainTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 10,
    Suffix = "JumpPower",
    CurrentValue = 10,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = v
    end,
 })

 local MainTab = MainWindow:CreateTab("Mags", 4483362458) -- Title, Image

 local Toggle = MainTab:CreateToggle({
    Name = "Ball Trajectory (Somewhat Acurate)",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local TERRAIN = game.Workspace.Terrain

        local BEAM = Instance.new("Beam")
        BEAM.Color = ColorSequence.new(Color3.new(1, 0, 0))
        BEAM.Transparency = NumberSequence.new(0)
        BEAM.FaceCamera = true
        BEAM.Segments = 20
        BEAM.Width0 = 0.1
        BEAM.Width1 = 0.1
        
        -- Class
        
        local Trajectory = {}
        Trajectory.__index = Trajectory
        
        -- Private Functions
        
        local function reflect(v, n)
            return -2*v:Dot(n)*n + v
        end
        
        local function drawBeamProjectile(g, v0, x0, t)
            local c = 0.5*0.5*0.5
            local p3 = 0.5*g*t*t + v0*t + x0
            local p2 = p3 - (g*t*t + v0*t)/3
            local p1 = (c*g*t*t + 0.5*v0*t + x0 - c*(x0+p3))/(3*c) - p2
            
            local curve0 = (p1 - x0).Magnitude
            local curve1 = (p2 - p3).Magnitude
            
            local b = (x0 - p3).unit
            local r1 = (p1 - x0).unit
            local u1 = r1:Cross(b).unit
            local r2 = (p2 - p3).unit
            local u2 = r2:Cross(b).unit
            b = u1:Cross(r1).unit
            
            local cfA = CFrame.fromMatrix(x0, r1, u1, b)
            local cfB = CFrame.fromMatrix(p3, r2, u2, b)
            
            local A0 = Instance.new("Attachment")
            local A1 = Instance.new("Attachment")
            local Beam = BEAM:Clone()
            
            A0.CFrame = cfA
            A0.Parent = TERRAIN
            A1.CFrame = cfB
            A1.Parent = TERRAIN
            
            Beam.Attachment0 = A0
            Beam.Attachment1 = A1
            Beam.CurveSize0 = curve0
            Beam.CurveSize1 = -curve1
            Beam.Parent = TERRAIN
        end
        
        local Trajectory = {}
        Trajectory.__index = Trajectory
        
        -- Private Functions
        
        local function reflect(v, n)
            return -2*v:Dot(n)*n + v
        end
        
        local function drawBeamProjectile(g, v0, x0, t)
            local c = 0.5*0.5*0.5
            local p3 = 0.5*g*t*t + v0*t + x0
            local p2 = p3 - (g*t*t + v0*t)/3
            local p1 = (c*g*t*t + 0.5*v0*t + x0 - c*(x0+p3))/(3*c) - p2
            
            local curve0 = (p1 - x0).Magnitude
            local curve1 = (p2 - p3).Magnitude
            
            local b = (x0 - p3).unit
            local r1 = (p1 - x0).unit
            local u1 = r1:Cross(b).unit
            local r2 = (p2 - p3).unit
            local u2 = r2:Cross(b).unit
            b = u1:Cross(r1).unit
            
            local cfA = CFrame.fromMatrix(x0, r1, u1, b)
            local cfB = CFrame.fromMatrix(p3, r2, u2, b)
            
            local A0 = Instance.new("Attachment")
            local A1 = Instance.new("Attachment")
            local Beam = BEAM:Clone()
            
            A0.CFrame = cfA
            A0.Parent = TERRAIN
            A1.CFrame = cfB
            A1.Parent = TERRAIN
            
            Beam.Attachment0 = A0
            Beam.Attachment1 = A1
            Beam.CurveSize0 = curve0
            Beam.CurveSize1 = -curve1
            Beam.Parent = TERRAIN
        end
        
        -- Public Constructors
        
        function Trajectory.new(gravity)
            local self = setmetatable({}, Trajectory)
            
            self.Gravity = gravity
            self.TimeStep = 0.1
            self.MaxTime = 3
            self.MinSpeed = 15
            self.MaxBounce = 0
            
            return self
        end
        
        -- Public Methods
        
        function Trajectory:Velocity(v0, t)
            -- g*t + v0
            return self.Gravity*t + v0
        end
        
        function Trajectory:Position(x0, v0, t)
            -- 0.5*g*t^2 + v0*t + x0
            return 0.5*self.Gravity*t*t + v0*t + x0
        end
        
        function Trajectory:PlaneQuadraticIntersection(x0, v0, p, n)
            local a = (0.5*self.Gravity):Dot(n)
            local b = v0:Dot(n)
            local c = (x0 - p):Dot(n)
            
            if (a ~= 0) then
                local d = math.sqrt(b*b - 4*a*c)
                return (-b - d)/(2*a)
            else
                return -c / b
            end
        end
        
        function Trajectory:CalculateSingle(x0, v0, ignoreList)
            local t = 0
            local hit, pos, normal, material
            
            repeat
                local p0 = self:Position(x0, v0, t)
                local p1 = self:Position(x0, v0, t + self.TimeStep)
                t = t + self.TimeStep
                
                local ray = Ray.new(p0, p1 - p0)
                hit, pos, normal, material = game.Workspace:FindPartOnRayWithIgnoreList(ray, ignoreList, false, true)
            until (hit or t >= self.MaxTime)
            
            if (hit) then
                if hit.CanCollide == false and not table.find(ignoreList, hit) then
                    table.insert(ignoreList, hit)
                end
                local t = self:PlaneQuadraticIntersection(x0, v0, pos, normal)
                local x1 = self:Position(x0, v0, t)
                return t, normal, PhysicalProperties.new(material)
            end
        end
        
        function Trajectory:Cast(x0, v0, material, ignoreList)
            local bounce = 0
            local t, x1, normal, pB
            local speed2 = self.MinSpeed*self.MinSpeed
            local pA = PhysicalProperties.new(material) 
            local path = {}
            
            while (v0:Dot(v0) >= speed2 and bounce <= self.MaxBounce) do
                t, normal, pB = self:CalculateSingle(x0, v0, ignoreList)
                if (t) then
                    table.insert(path, {x0, v0, t})
                    
                    local elast = (pA.Elasticity*pA.ElasticityWeight + pB.Elasticity*pB.ElasticityWeight)/(pA.ElasticityWeight+pB.ElasticityWeight)
                    local frict = (pA.Friction*pA.FrictionWeight + pB.Friction*pB.FrictionWeight)/(pA.FrictionWeight+pB.FrictionWeight)
                    local dot = 1 - math.abs(v0.Unit:Dot(normal))
                    
                    print(dot)
                    x0 = self:Position(x0, v0, t)
                    v0 = reflect(self:Velocity(v0, t), normal) * elast + v0 * frict * dot
                    bounce = bounce + 1
                else
                    bounce = self.MaxBounce + 1
                end
            end
            
            return path
        end
        
        function Trajectory:Draw(path)
            for i = 1, #path do
                local x0, v0, t = unpack(path[i])
                drawBeamProjectile(self.Gravity, v0, x0, t)
            end
        end
        
        
        
        local LocalPlayer = game:GetService("Players").LocalPlayer
        
        local trajectory = Trajectory.new(Vector3.new(0, -28.5, 0))
        local origin = LocalPlayer.Character:WaitForChild("Head")
        local mouse = LocalPlayer:GetMouse()
        
        local ignoreList = {game.Workspace.Terrain, LocalPlayer.Character}
        
        local pause = false
        game:GetService("RunService").RenderStepped:Connect(function(dt)
            if not pause then
                game.Workspace.Terrain:ClearAllChildren()
        
                if LocalPlayer.Character:FindFirstChild("Football") then
                    local speed = LocalPlayer.PlayerGui:FindFirstChild("BallGui") and tonumber(LocalPlayer.PlayerGui.BallGui.Frame.Disp.Text) or 60
        
                    local dir = (mouse.Hit.p - (origin.CFrame + Vector3.new(0,1,0)).p).Unit
                    local x0 = origin.Position + dir*2
                    local v0 = dir*speed
                    
                    local path = trajectory:Cast(x0, v0, Enum.Material.Plastic, ignoreList)
                    trajectory:Draw(path)
                end
            end
        end)
        
        game:GetService("UserInputService").InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and not pause then
                pause = true
                task.delay(3, function() 
                    pause = false 
                end)
            end
        end)  
    
    end,
 })

 local Toggle = MainTab:CreateToggle({
    Name = "Universal Mags",
    CurrentValue = false,
    Flag = "Mags", 
    Callback = function(Value)
        local rs=game:GetService("RunService")
        local plr=game.Players.LocalPlayer
        _G.reach=25 -- studs
        for _,v in pairs(workspace:GetDescendants()) do if v:IsA("Seat") then v.Disabled=true end end
        while true do
           if plr.Character and plr.Character:FindFirstChild("CatchRight") and plr.Character:FindFirstChild("CatchLeft") then
               local cl=plr.Character['CatchLeft']
               local cr=plr.Character['CatchRight']
               for _,v in pairs(workspace:GetChildren()) do
                   if v.Name=="Football" then
                       firetouchinterest(cl,v,0)
                       firetouchinterest(cr,v,0)
                       task.wait()
                       firetouchinterest(cl,v,1)
                       firetouchinterest(cr,v,1)
                   end
               end
               if cl.Size~=Vector3.new(_G.reach,_G.reach,_G.reach) then
                  cl.Size=Vector3.new(_G.reach,_G.reach,_G.reach)
               end
               if cr.Size~=Vector3.new(_G.reach,_G.reach,_G.reach) then
                   cr.Size=Vector3.new(_G.reach,_G.reach,_G.reach)
               end
           end
           rs.Stepped:Wait()
        end
            end    
        })

        local MainTab = MainWindow:CreateTab("Kicker", 4483362458) -- Title, Image

        local Toggle = MainTab:CreateToggle({
            Name = "Kicker Aimbot",
            CurrentValue = false,
            Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
            Callback = function(Value)
                local Aimbot = {}

do
    local AimbotSection = Variables.Kicking:AddSection("Aimbot")
    AimbotSection:AddToggle("Enabled", {flag = "KickerAimbot_Enabled"}, function() end)
end

function Aimbot:GetAccuracyArrow(Arrows)
    local Y = 0
    local Arrow1 = nil

    for _, Arrow in pairs(Arrows) do
        if Arrow.Position.Y.Scale > Y then
            Y = Arrow.Position.Y.Scale
            Arrow1 = Arrow 
        end
    end

    return Arrow1
end

Variables.Client.PlayerGui.ChildAdded:Connect(function(child)
    if child.Name == "KickerGui" and Variables.Kicking.Flags["KickerAimbot_Enabled"] then
        local KickerGui = child 
        local Meter = KickerGui:FindFirstChild("Meter")
        local Cursor = Meter:FindFirstChild("Cursor")
        local Arrows = {}
        
        for i,v in pairs(Meter:GetChildren()) do
            if string.find(v.Name:lower(), "arrow") then
                table.insert(Arrows, v)
            end
        end 

        repeat task.wait() until Cursor.Position.Y.Scale < 0.02
        mouse1click()
        repeat task.wait() until Cursor.Position.Y.Scale >= Aimbot:GetAccuracyArrow(Arrows).Position.Y.Scale + (.03 / (100 / 100))
        mouse1click()
    end
end)


return Aimbot
            -- The function that takes place when the toggle is pressed
            -- The variable (Value) is a boolean on whether the toggle is true or false
            end,
         })

        
